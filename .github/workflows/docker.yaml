name: Build and Push Docker Image

on:
  push:
    branches: [ "docker", "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "docker", "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/rgb-lightning-node

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,amd64'
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # Always tag as latest
            type=raw,value=latest
            # Platform specific latest tags
            type=raw,value=latest-amd64,enable=${{ github.event_name != 'pull_request' }}
            type=raw,value=latest-arm64,enable=${{ github.event_name != 'pull_request' }}
            # Git tags (v1.0.0 -> 1.0.0)
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            # Git sha tags
            type=sha,prefix=sha-,format=short

      - name: Build and push multi-architecture image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 